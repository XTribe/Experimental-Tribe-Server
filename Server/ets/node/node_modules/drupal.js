
// Handles HTTP connections to Drupal
// (quite similar to the manager.js module)

var Http = require('http')

exports.createClient = function(site) {
  return new DrupalClient(site);
}

DrupalClient = function(site) {
  this.site = site;
}

DrupalClient.prototype._method = function(path, method, params, cb) {
    
  var qs = [];
  for (param in params) {
    qs.push(param + '=' + encodeURIComponent(params[param]));
  }

  if (method == 'GET' && qs.length > 0) {
    path += "?" + qs.join('&');
  }
  
  var options = {
    host:   this.site.hostname,
    port:   this.site.port,
    path:   path,
    method: method,
    headers: {
      // , 'Content-Length':'7'
    }
  };

  if ('POST' == method) {
    options.headers['Content-Type'] = 'application/x-www-form-urlencoded';
  }

  var req = Http.request(options, function(res) {
    
    var chunks = [];
    
    res.setEncoding('utf8');
    
    res.on('data', function (chunk) {
      chunks.push(chunk.toString());
    });
    
    res.on('end', function() {
      
      var data = null
        , error = null;

      if (200 == res.statusCode) {
        try {
          data = JSON.parse(chunks.join());
        } catch(e) {
          error = "Bad response from server (" + options.host + options.path + ")";
        }
      } else {
        error = 'Path not found or system error ' + options.host + options.path + " code (" + res.statusCode + ")";
      }
      cb && cb(error, data);
    });
  });

  req.setTimeout(30000, function(err) {
    // https://groups.google.com/d/msg/nodejs/nx3ZyQ7Uk70/Qhvs_gVtj4kJ
    // To abort without raising an exception, just set the handler on('error')
    req.abort();
    cb && cb("Timeout expired waiting for Drupal");
  });

  req.on('error', function(e) {
    // Needed just to be able to req.abort() without raising an exception
  });

  if (method == 'POST' && qs.length > 0) {
    req.write(qs.join('&'));
  }
  
  req.end();
}


DrupalClient.prototype.get = function(path, params, cb) {
  this._method(path, 'GET', params, cb);
}
  
DrupalClient.prototype.post = function(path, params, cb) {
  this._method(path, 'POST', params, cb);
}

DrupalClient.prototype.setSite = function(site) {
  this.site = site;
}
