

// Levels are:
// silly (0), verbose (1), info (2), warn (3), error (4)
var levels = ['error', 'warn', 'info', 'verbose', 'silly']

var cfg = require('config').read()

var Winston = require("winston")

if (cfg.services.log.level < 0 || cfg.services.log.level > (levels.length - 1)) {
  cfg.servies.log.level = levels.length - 1
}

exports.createClient = function(service) {
  return new Logger(service);
}

var Logger = function(service) {
  
  this.service = service;
  
  this.w = new (Winston.Logger)({
    transports: [
      new (Winston.transports.Console)({level: levels[cfg.services.log.level], timestamp: true, colorize: true}),
    ]
  });

  var self = this  
  levels.forEach(function(level) {
    self[level] = function(message) {
      self.w.log(level, self.service + " " + message);
    }
  })
  
}

Logger.prototype.warning = function(message) {
  this.w.log('warn', this.service + " " + message);
}

/*
var Redis
  , Pubsub
  , cfg = require('config').read()

exports.createClient = function(service) {
  
  if ('redis' == cfg.log_backend) {
    Redis  = require('redis')
    Pubsub = require('pubsub')
  }
  
  return new Logger(service); 
}

function Logger(service) {
  this.backendName = cfg.log_backend
  this.service = service;
  this.lastMessage = null;
  this.client = null  // redis client
  
  if ('redis' == this.backendName) {
    var self = this
    this.client = Redis.createClient(cfg.redis_port, cfg.redis_host);
    this.client.on("error", function(e) {
      self.lastMessage && console.log(self.lastMessage)
      // subsequent errors do not interest us
      if ('console' == self.backendName) {
        return;
      }
      // If there is an error on redis, switch to console
      self.backendName = 'console'
      self.client.closing = true
    })
  }
}

Logger.prototype.write = function(message) {
  this.lastMessage = message
  if (this.client) {
    this.client.publish(Pubsub.channels.LOG, JSON.stringify(this.service + ': ' + timestamp() + " - " + message));
  } else {
    var m =  '\033[36m' + this.service + ' ' + timestamp() + ':\033[39m ' + message
    console.log(m);
  }
}

Logger.prototype.destroy = function() {
  if (this.client) {
    this.client.quit();
  }
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

*/