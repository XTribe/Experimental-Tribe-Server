
/*  This function reads data relative to an experiment that are not managed by
Drupal and keep them together to data that are managed by ehs/mhs. Data are, before, searched
in Redis, and then, if not finded there, asked to Drupal.
 */

var Stash  = require('stash')
  , Step   = require('step')
  , Drupal = require('drupal')
 
var EXPERIMENTS = {}

// Stash is exported for tests
var stash = exports.stash = Stash.createClient();

// Used only for bogus experiments
exports.saveData = function (data) {
  var k = getKey(data.eId);
  stash.set(k, data);
}

exports.get = function (site, eId, cb) {
  
  var k = getKey(eId);

  Step (
    
    function() {
      stash.get(k, this);
    }
    
    ,
    
    function (err, data) {

      if (data) {
        this(null, data, true);
      } else {
        Drupal.createClient(site)
              .get('/ets/services/exp-info/' + eId, null, this);
      }

    }

    ,

    function (error, data, cached) {

      cached = cached || false;

      if (error) {
        cb && cb(error);
        return;
      }

      /* If 'experiment, stays null, then this is the first time that a data request
	is done for this experiment. Data could be asked by Drupal (if the cache is expired)
	and, in that case, redis must be updated.
       */
      var exp = retrieve(eId, false);
      
      if (exp) {
        // Esperimento already existing, update data
        exp.data = data;
      } else {
        // Esperimento nnot found: it gets created and saved in memory
        exp = {};
        exp.eId = eId;
        exp.data = data;
        exp.instances = [];
        EXPERIMENTS[exp.eId] = exp;
      }

      exp.cached = cached;

      if (!cached) {
        stash.set(k, data, 120);
      }

      cb(null, exp);
    }

  );

}

var retrieve = exports.retrieve = function (eId, critical) {
  
  if ('undefined' == typeof EXPERIMENTS[eId]) {
    if (critical) {
      throw "The specified experiment is not in cache (but it should)";
    } else {
      return null;
    }
  } else {
    return EXPERIMENTS[eId]
  }
  
}

// for tests
exports.cacheExpire = function(eId, cb) {
  stash.del(getKey(eId), cb);
}

var getKey = function(eId) {
  return 'experiment:' + eId;
}
