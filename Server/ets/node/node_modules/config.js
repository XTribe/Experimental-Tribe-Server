
var Fs = require('fs')
  , Path = require('path');

var defaults = {

  "ets_key": "change me",

  "run_as": "www-data",
  
  "services": {

    "proxy": {
      "endpoint": "*:80",
      "enabled": true
    },

    "site": {
      "endpoint": "www.xtribe.local:8080",
      "enabled": true
    },

    "ehs": {
      "endpoint": "ehs.xtribe.local:6701",
      "enabled": true
    }, 

    "mhs": {
      // From web clients
      "endpoint": "mhs.xtribe.local:6721",
      // From managers and as the default manager
      "endpoint2": "mhs.xtribe.local:6722",
      "enabled": true
    }, 

    "redis": {
      "endpoint": "localhost:6379",
      "enabled": true
    }, 

    "mon": {
      "endpoint": "localhost:6767",
      "enabled": true
    },

    "ths": {
      "enabled": true
    },

    // At the moment this is used only by socket.io internal messages
    // Set log_level to 0 if you want to see only messages from the ETS SS
    "log": {
      "level": 4,
      "appendTo": "/var/log/ets/ets.log"
    },

    "stash": {
      // "redis" or "file"
      "backend": "redis",
      // Used only if backed == "file"
      "file": "/tmp/ets_stash.db"

    }
  }

};

var config = null;

exports.read = function() {

  if (config) {
    return config;
  }

  var cwd = Path.dirname(process.mainModule.filename).split('/')
  
  var p1 = cwd[1] + "/" + cwd[2]
    , p2 = cwd.splice(3)
    , path = ''
    
  cwd = buildCwd()

  while (p2.length > 0) {
    try {
      Fs.statSync(cwd + "/conf/config.json");
      break
    } catch(e) {
      p2.splice(-1)
      cwd = buildCwd()
    }
  }

  function buildCwd() {
    var out = '/' + p1;
    for (var i = 0; i < p2.length; i++) {
      out += "/" + p2[i]
    }
    
    return out
  }

  if (p2.length == 0) {
    throw("config.json not found.")
  }
  
  var configStr = Fs.readFileSync(cwd + '/conf/config.json', encoding="utf-8").toString();
  
  // FIXME this RE *blocks* unexplicably the process
  // configStr = configStr.replace(/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/gm,"").replace(/#.*/g,"").replace(/\/\/.*/g,"");
  configStr = configStr.replace(/\/\/.*/g,"");

  try
  {
    config = JSON.parse(configStr);
  }
  catch(e)
  {
    console.error("There is a syntax error in your config.json file");
    console.error(e.message);
    process.exit(1);
  }

  for (var k in config) {
    // we know this setting, so we overwrite it
    if (defaults[k] !== undefined) {
      defaults[k] = config[k];
    } else {
      console.warn("Unkown Setting: '" + k + "'");
      console.warn("This setting doesn't exist or it has been removed.");
      if (k === 'environment') {
        console.warn("Use NODE_ENV system variable instead.");
      }
    }
  }

  config.environment = 'development';
  if (typeof process.env.NODE_ENV !== 'undefined') {
    config.environment = process.env.NODE_ENV;
  }
  
  return config;
  
}
