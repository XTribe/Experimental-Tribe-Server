// Handles HTTP connections to managers
// (quite similar to the drupal.js module)

var Http  = require('http')
  , Tools = require('tools');

exports.createClient = function(host, port) {

  if (typeof host == 'undefined') {
    return null
  }
  
  return new ManagerClient(host.replace(/https?:\/\//, ''), port);
}

ManagerClient = function(host, port) {
  this.host = host;
  this.port = port || 80;
}

ManagerClient.prototype._method = function(path, method, params, cb) {

  var contentBody = encodeURIComponent(JSON.stringify(params));

  if (method == 'GET' && Object.keys(params).length > 0) {
    path += "?message=" + contentBody;
  }

  if (path.charAt(0) != '/') {
    path = '/' + path;
  }
  
  var options = {
    host: this.host,
    port: this.port,
    path: path,
    method: method,
    headers: {
    }
  };
  
  if ('POST' == method) {
    options.headers['Content-Type'] = 'application/x-www-form-urlencoded';
    options.headers['Content-Length'] = contentBody.length + "message=".length;
  }

  var req = Http.request(options, function(res) {

    var chunks = [];
    
    res.setEncoding('utf8');
    
    res.on('data', function (chunk) {
      chunks.push(chunk.toString());
    });

    res.on('close', function() {
      // Indicates that the underlaying connection was terminated before end event was emitted.
    });
    
    res.on('end', function() {

      var data = null
        , error = null;

      if (200 == res.statusCode) {
        if (chunks.length > 0) {
          data = parseData(chunks.join(''))
          if (false === data) {
            error = "Bad JSON response from manager (" + options.host + options.path + ")";
            error += chunks.join('')
          }
        } else {
          data = [];
        }
      } else {
        error = 'Path not found or system error ' + options.host + options.path + " " + res.statusCode + " " + chunks;
      }
      cb && cb(error, data);
    });

    // A single request data blob could contain more than one message in the
    // form "{ ... }{ ... }" (not JSON parsable as is) or "[{ ... }, { ... }]"
    // (JSON parsable as is). We try our best to split the blob in singole
    // messages parsing curly braces and creating an array of messages
    // Returns FALSE if the blob is not parseable or an array of messages
    // (always, even if there is one only message)
    function parseData(s) {
      
      var messages = [],
          buffer   = [],
          l        = s.length,
          c        = 0,    // {s counter
          ins      = false // in string or not
      
      // Try first a plain JSON parse (for array or single messages already there)
      try {
        messages = JSON.parse(s)
        if ('object' == typeof messages && !Tools.isArray(messages)) {
          messages = [messages];
        }
        return messages
      } catch(e) {
        // Continue with our parsing
      }
      
      // Always assure there is at least a couple of escape quotes
      s = s.replace(/\\"/g, '\\"\\"')
      
      for (var i=0; i < l; i++) {
        
        buffer.push(s[i])
      
        if ('"' == s[i]) {
          ins = !ins;
          continue;
        }
        
        if (!ins && '{' == s[i]) {
          c++;
          continue;
        }
      
        if (!ins && '}' == s[i]) {
          c--;
          if (0 == c) {
            try {
              messages.push(JSON.parse(buffer.join('').replace(/\\"\\"/g, '\\"')))
              buffer.length = 0
            } catch(e) {
              return false  
            }
          }
        }
      }
      
      return messages
    }

    
  });

  req.setNoDelay()
  
  req.setTimeout(5000, function(err) {
    // https://groups.google.com/d/msg/nodejs/nx3ZyQ7Uk70/Qhvs_gVtj4kJ
    // To abort without raising an exception, just set the handler on('error')
    req.abort();
    cb && cb("Timeout expired waiting for manager");
  });

  req.on('error', function(e) {
    cb && cb("Error contacting the manager " + (typeof e.code != 'undefined' ? e.code : ''));
  });

  if (method == 'POST' && Object.keys(params).length > 0) {
    req.write("message=" + contentBody);
  }

  req.end();
  
}

ManagerClient.prototype.get = function(path, params, cb) {
  this._method(path, 'GET', params, cb);
}
  
ManagerClient.prototype.post = function(path, params, cb) {
  this._method(path, 'POST', params, cb);
}
